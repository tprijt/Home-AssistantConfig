  - platform: afvalbeheer
    wastecollector: HVC
    resources:
      - gft
      - pmd
    postcode: 1992AW
    streetnumber: 126
    builtinicons: 1
    disableicons: 1
    dateonly: 0
    dateobject: 0
    dutch: 1
  - platform: dsmr
    port: /dev/ttyUSB1
    dsmr_version: 5  
    precision: 2
  - platform: template
    sensors:       
      trash_first_up:
        friendly_name_template: "{% if state_attr('sensor.hvc_gft','Sort-date') < state_attr('sensor.hvc_pmd','Sort-date') %} Groene bak {% else %} Oranje bak {% endif %}"
        value_template: "{% if state_attr('sensor.hvc_gft','Sort-date') < state_attr('sensor.hvc_pmd','Sort-date') %} {{ states('sensor.hvc_gft') }} {% else %} {{ states('sensor.hvc_pmd') }} {% endif %}"
        icon_template: "{% if state_attr('sensor.hvc_gft','Sort-date') < state_attr('sensor.hvc_pmd','Sort-date') %} mdi:food-apple-outline {% else %} mdi:recycle {% endif %}"
      trash_next:
        friendly_name_template: "{% if state_attr('sensor.hvc_gft','Sort-date') > state_attr('sensor.hvc_pmd','Sort-date') %} Groene bak {% else %} Oranje bak {% endif %}"
        value_template: "{% if state_attr('sensor.hvc_gft','Sort-date') > state_attr('sensor.hvc_pmd','Sort-date') %} {{ states('sensor.hvc_gft') }} {% else %} {{ states('sensor.hvc_pmd') }} {% endif %}"
        icon_template: "{% if state_attr('sensor.hvc_gft','Sort-date') > state_attr('sensor.hvc_pmd','Sort-date') %} mdi:food-apple-outline {% else %} mdi:recycle {% endif %}"
      living_room_tv_source:
        value_template: '{{ states.media_player.sony_bravia_tv.attributes["source"] }}'
        friendly_name: 'TV Woonkamer bron'
  - platform: rest
    name: tv_power_saving_state
    resource: http://192.168.178.22/sony/system
    method: POST
    payload: '{"method": "getPowerSavingMode","id": 51,"params": [],"version": "1.0"}'
    value_template: >
      {%- if value_json is defined -%}
        {{- value_json.result[0].mode -}}
      {%- else -%}
        offline
      {%- endif -%}
  - platform: template
    sensors:
      hourly_energy_used:
        friendly_name: hourly_energy_used
        unit_of_measurement: 'kWh'
        value_template: >
          {{
          (
          (states('sensor.hourly_solar_energy_production') | float)
          -
          (states('sensor.hourly_energy_production_overall') | float)
          +
          (states('sensor.hourly_energy_consumption_overall') | float)
          ) 
          }}        
      energy_consumption_overall:
        friendly_name: 'Overall energy consumption'
        unit_of_measurement: 'kWh'
        #value_template: "{{ ((states('sensor.energy_consumption_tarif_1') | float) + (states('sensor.energy_consumption_tarif_2') | float)) | round(4) }}"
        value_template: >
          {% set ns = namespace(states=[], offline=[]) %}
          {% for s in states.sensor %}
            {% if s.object_id.startswith('energy_consumption_tarif') %}
              {% if s.state in ['unavailable', 'unknown' ] %}
                {% set ns.offline = ns.offline + [ s.entity_id ] %}
              {% else %}
                {% set ns.states = ns.states + [ s.state | float ] %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if ns.offline | count > 0 %}
            unavailable
          {% else %}
            {{ (ns.states | sum | float) | round(4) }}
          {% endif %}
      energy_production_overall:
        friendly_name: 'Overall energy production'
        unit_of_measurement: 'kWh' 
        #value_template: "{{ ((states('sensor.energy_production_tarif_1') | float) + (states('sensor.energy_production_tarif_2') | float)) | round(4) }}"
        value_template: >
          {% set ns = namespace(states=[], offline=[]) %}
          {% for s in states.sensor %}
            {% if s.object_id.startswith('energy_production_tarif') %}
              {% if s.state in ['unavailable', 'unknown' ] %}
                {% set ns.offline = ns.offline + [ s.entity_id ] %}
              {% else %}
                {% set ns.states = ns.states + [ s.state | float ] %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if ns.offline | count > 0 %}
            unavailable
          {% else %}
            {{ (ns.states | sum | float) | round(4) }}
          {% endif %}
      net_energy_consumption:
        friendly_name: 'Net energy consumption'
        unit_of_measurement: 'kWh'
        #value_template: "{{ ((states('sensor.energy_consumption_tarif_1') | float) + (states('sensor.energy_consumption_tarif_2') | float)) | round(4) }}"
        value_template: >
          {% set ns = namespace(states=[], offline=[]) %}
          {% for s in states.sensor %}
            {% if s.object_id.startswith('energy_consumption_tarif') or s.object_id.startswith('energy_production_tarif') %}
              {% if s.state in ['unavailable', 'unknown' ] %}
                {% set ns.offline = ns.offline + [ s.entity_id ] %}
              {% endif %}
            {% endif %}
            {% if s.object_id.startswith('energy_production_tarif') %}
              {% set ns.states = ns.states + [ -(s.state | float) ] %}
            {% endif %}
            {% if s.object_id.startswith('energy_consumption_tarif') %}
              {% set ns.states = ns.states + [ s.state | float ] %}
            {% endif %}
          {% endfor %}
          {% if ns.offline | count > 0 %}
            unavailable
          {% else %}
            {{ (ns.states | sum | float) | round(4) }}
          {% endif %}
      solar_energy_production:
        friendly_name: Solar energy production
        unit_of_measurement: 'kWh' 
        value_template: >
          {% set ns = namespace(states=[], offline=[]) %}
          {% for s in states.sensor %}
            {% if s.object_id.endswith('solaredge_lifetime_energy') %}
              {% if s.state in ['unavailable', 'unknown' ] %}
                {% set ns.offline = ns.offline + [ s.entity_id ] %}
              {% else %}
                {% set ns.states = ns.states + [ s.state | float ] %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if ns.offline | count > 0 %}
            unavailable
          {% else %}
            {{ (ns.states | sum | float) / 1000 | round(4) }}
          {% endif %}